;; Parts of this from the following copyright notices, the total has
;; the same copyright terms, additions and changes Copyright 2019
;; Harold Ancell, Harold Ancell assigns the rights to his additions to
;; Alex Shinn.

;; filesystem.stub -- filesystem bindings
;; Copyright (c) 2009-2013 Alex Shinn.  All rights reserved.
;; BSD-style license: http://synthcode.com/license.txt

(cond-expand
 (plan9)
 (windows
  (c-system-include "sys/types.h")
  (c-system-include "fcntl.h"))
 (else

  (c-system-include "errno.h")

  (c-system-include "fcntl.h")

;;;  (c-system-include "sys/file.h") ; Only needed for BSD low level file operations?
  (c-system-include "unistd.h")
  (c-system-include "dirent.h")

  (c-system-include "sys/types.h")
  (c-system-include "sys/stat.h")

  (c-system-include "sys/resource.h")

  (c-system-include "pwd.h")
  (c-system-include "grp.h")

  (c-system-include "sys/utsname.h")

  (c-system-include "signal.h")

  (c-system-include "time.h")
  (c-system-include "sys/time.h")

  ))

;;; 3.1  Errors

(define-c-const int (errno/2big "E2BIG"))
(define-c-const int (errno/acces "EACCES"))
(define-c-const int (errno/addrinuse "EADDRINUSE"))
(define-c-const int (errno/addrnotavail "EADDRNOTAVAIL"))
(define-c-const int (errno/afnosupport "EAFNOSUPPORT"))
(define-c-const int (errno/again "EAGAIN"))
(define-c-const int (errno/already "EALREADY"))
(define-c-const int (errno/badf "EBADF"))
(define-c-const int (errno/badmsg "EBADMSG"))
(define-c-const int (errno/busy "EBUSY"))
(define-c-const int (errno/canceled "ECANCELED"))
(define-c-const int (errno/child "ECHILD"))
(define-c-const int (errno/connaborted "ECONNABORTED"))
(define-c-const int (errno/connrefused "ECONNREFUSED"))
(define-c-const int (errno/connreset "ECONNRESET"))
(define-c-const int (errno/deadlk "EDEADLK"))
(define-c-const int (errno/destaddrreq "EDESTADDRREQ"))
(define-c-const int (errno/dom "EDOM"))
(define-c-const int (errno/dquot "EDQUOT"))
(define-c-const int (errno/exist "EEXIST"))
(define-c-const int (errno/fault "EFAULT"))
(define-c-const int (errno/fbig "EFBIG"))
(define-c-const int (errno/hostunreach "EHOSTUNREACH"))
(define-c-const int (errno/idrm "EIDRM"))
(define-c-const int (errno/ilseq "EILSEQ"))
(define-c-const int (errno/inprogress "EINPROGRESS"))
(define-c-const int (errno/intr "EINTR"))
(define-c-const int (errno/inval "EINVAL"))
(define-c-const int (errno/io "EIO"))
(define-c-const int (errno/isconn "EISCONN"))
(define-c-const int (errno/isdir "EISDIR"))
(define-c-const int (errno/loop "ELOOP"))
(define-c-const int (errno/mfile "EMFILE"))
(define-c-const int (errno/mlink "EMLINK"))
(define-c-const int (errno/msgsize "EMSGSIZE"))
(define-c-const int (errno/nametoolong "ENAMETOOLONG"))
(define-c-const int (errno/netdown "ENETDOWN"))
(define-c-const int (errno/netreset "ENETRESET"))
(define-c-const int (errno/netunreach "ENETUNREACH"))
(define-c-const int (errno/nfile "ENFILE"))
(define-c-const int (errno/nobufs "ENOBUFS"))
(define-c-const int (errno/nodev "ENODEV"))
(define-c-const int (errno/noent "ENOENT"))
(define-c-const int (errno/noexec "ENOEXEC"))
(define-c-const int (errno/nolck "ENOLCK"))
(define-c-const int (errno/nomem "ENOMEM"))
(define-c-const int (errno/nomsg "ENOMSG"))
(define-c-const int (errno/noprotoopt "ENOPROTOOPT"))
(define-c-const int (errno/nospc "ENOSPC"))
(define-c-const int (errno/nosys "ENOSYS"))
(define-c-const int (errno/notconn "ENOTCONN"))
(define-c-const int (errno/notdir "ENOTDIR"))
(define-c-const int (errno/notempty "ENOTEMPTY"))
(define-c-const int (errno/notrecoverable "ENOTRECOVERABLE"))
(define-c-const int (errno/notsock "ENOTSOCK"))
(define-c-const int (errno/notsup "ENOTSUP"))
(define-c-const int (errno/notty "ENOTTY"))
(define-c-const int (errno/nxio "ENXIO"))
(define-c-const int (errno/opnotsupp "EOPNOTSUPP"))
(define-c-const int (errno/overflow "EOVERFLOW"))
(define-c-const int (errno/ownerdead "EOWNERDEAD"))
(define-c-const int (errno/perm "EPERM"))
(define-c-const int (errno/pipe "EPIPE"))
(define-c-const int (errno/proto "EPROTO"))
(define-c-const int (errno/protonosupport "EPROTONOSUPPORT"))
(define-c-const int (errno/prototype "EPROTOTYPE"))
(define-c-const int (errno/range "ERANGE"))
(define-c-const int (errno/rofs "EROFS"))
(define-c-const int (errno/spipe "ESPIPE"))
(define-c-const int (errno/srch "ESRCH"))
(define-c-const int (errno/stale "ESTALE"))
(define-c-const int (errno/timedout "ETIMEDOUT"))
(define-c-const int (errno/txtbsy "ETXTBSY"))
(define-c-const int (errno/wouldblock "EWOULDBLOCK"))
(define-c-const int (errno/xdev "EXDEV"))

(cond-expand
 ((not bsd) ;; stand in for OpenBSD
  (define-c-const int (errno/multihop "EMULTIHOP"))
  (define-c-const int (errno/nolink "ENOLINK"))
  ;; STREAMS
  (define-c-const int (errno/nodata "ENODATA"))
  (define-c-const int (errno/nosr "ENOSR"))
  (define-c-const int (errno/nostr "ENOSTR"))
  (define-c-const int (errno/time "ETIME"))))

;;; 3.2  I/O

;;> Duplicates the given file descriptor, returning he new value,
;; or -1 on failure.

(define-c fileno (duplicate-file-descriptor "dup") (fileno))

;;> Copies the first file descriptor to the second, closing
;;> it if needed.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(define-c errno (duplicate-file-descriptor-to "dup2") (fileno fileno))

;;> Closes the given file descriptor.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(define-c errno (close-file-descriptor "close") (fileno))


;;; 3.3  File system

(define-c errno (%delete-file unlink) (string))

;;> Creates a new directory with the given mode.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (%create-directory mkdir) (string mode_t)))
  (else
   (define-c errno (%create-directory "mkdir_shim") (string int))))

;;> Creates a fifo with the given mode.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (%create-fifo mkfifo) (string mode_t))))

;;> Creates a hard link to the first arg from the second.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (%create-hard-link link) (string string))))

;;> Creates a symbolic link to the first arg from the second.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (%create-symlink symlink) (string string))))

;;> Renames the first arg to the second.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(define-c errno (%rename-file rename) (string string))

;;> Deletes the directory named \var{string} from the filesystem.
;;> Does not attempt to delete recursively.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(define-c errno (%delete-directory rmdir) (string))

;;> Sets the file permissions as in chmod.

(define-c errno (%set-file-mode chmod) (string mode_t))
(define-c errno (%set-fd-mode fchmod) (int mode_t))

;;> Sets the file owner and group

(define-c errno (%chown chown) (string uid_t gid_t))
(define-c errno (%fchown chown) (string uid_t gid_t))
(define-c errno (%lchown chown) (string uid_t gid_t))

;;> Seting the file times

(define-c-const int (utimens/at_fdcwd "AT_FDCWD"))
(define-c-const int (utimens/utime_now "UTIME_NOW"))
(define-c-const int (utimens/at_symlink_nofollow "AT_SYMLINK_NOFOLLOW"))

(define-c-struct timespec
  predicate: %timespec?
  constructor: (make-%timespec)
  (time_t  tv_sec       %timespec:seconds)
  (long    tv_nsec      %timespec:nanoseconds))

;; ~~~~ should be (define-c errno (%utimensat utimensat) (int string (array (struct timespec) 2) int))
;;(define-c errno (%utimensat utimensat) (int string (array long 4) int))
;;(define-c errno (%futimens futimens) (int (array long 4)))

;;> Truncate the file to the given size.

(define-c errno (%truncate truncate) (string off_t))
(cond-expand
  ((not windows)
   (define-c errno (%ftruncate ftruncate) (int off_t))))

;;> Code for walking directories

(define-c-type DIR
 finalizer: closedir)
(define-c-struct dirent
 (string d_name dirent-name))

(define-c (free DIR) opendir (string))
(define-c dirent readdir ((link (pointer DIR))))

;; See sexp_closedir_stub autogenerated?? from the above (how does it
;; get "close"??); obviously an open directory that's never closed
;; needs explicit finalization before being GCed.


(cond-expand
  (windows
   (c-include-verbatim "filesystem_win32_shim.c")
   (define-c-struct stat
    predicate: stat?
    (dev_t      st_dev      stat:dev)
    (ino_t      st_ino      stat:ino)
    (mode_t     st_mode     stat:mode)
    (nlink_t    st_nlink    stat:nlinks)
    (uid_t      st_uid      stat:uid)
    (gid_t      st_gid      stat:gid)
    (dev_t      st_rdev     stat:rdev)
    (off_t      st_size     stat:size)
    ;(blksize_t  st_blksize  stat:blksize)
    ;(blkcnt_t   st_blocks   stat:blocks)
    (time_t     st_atime    stat:atime)
    (time_t     st_mtime    stat:mtime)
    (time_t     st_ctime    stat:ctime)))
  (else
   (define-c-struct stat
    predicate: stat?
    (dev_t      st_dev      stat:dev)
    (ino_t      st_ino      stat:ino)
    (mode_t     st_mode     stat:mode)
    (nlink_t    st_nlink    stat:nlinks)
    (uid_t      st_uid      stat:uid)
    (gid_t      st_gid      stat:gid)
    (dev_t      st_rdev     stat:rdev)
    (off_t      st_size     stat:size)
    (blksize_t  st_blksize  stat:blksize)
    (blkcnt_t   st_blocks   stat:blocks)
    ((struct timespec) st_atime    stat:atime)
    ((struct timespec) st_mtime    stat:mtime)
    ((struct timespec) st_ctime    stat:ctime))
   ))

(define-c errno (%stat stat) (string (result stat)))
(define-c errno (%fstat fstat) (int (result stat)))
(cond-expand
  ((not windows)
   (define-c errno (%lstat lstat) (string (result stat)))))

#| ~~~~
(define-c boolean S_ISREG (mode_t))
(define-c boolean S_ISDIR (mode_t))
(define-c boolean S_ISCHR (mode_t))
(define-c boolean S_ISBLK (mode_t))
(define-c boolean S_ISFIFO (mode_t))
(define-c boolean S_ISLNK (mode_t))
(define-c boolean S_ISSOCK (mode_t))

(cond-expand
 ((not windows)
  ;;(define-c-const int ("S_IFMT"))
  (define-c-const int (file/socket "S_IFSOCK"))
  (define-c-const int (file/link "S_IFLNK"))
  (define-c-const int (file/regular "S_IFREG"))
  (define-c-const int (file/block "S_IFBLK"))
  (define-c-const int (file/directory "S_IFDIR"))
  (define-c-const int (file/character "S_IFCHR"))
  (define-c-const int (file/fifo "S_IFIFO"))
  (define-c-const int (file/suid "S_ISUID"))
  (define-c-const int (file/sgid "S_ISGID"))
  (define-c-const int (file/sticky "S_ISVTX"))
  ;;(define-c-const int ("S_IRWXU"))
  (define-c-const int (perm/user-read "S_IRUSR"))
  (define-c-const int (perm/user-write "S_IWUSR"))
  (define-c-const int (perm/user-execute "S_IXUSR"))
  ;;(define-c-const int ("S_IRWXG"))
  (define-c-const int (perm/group-read "S_IRGRP"))
  (define-c-const int (perm/group-write "S_IWGRP"))
  (define-c-const int (perm/group-execute "S_IXGRP"))
  ;;(define-c-const int ("S_IRWXO"))
 (define-c-const int (perm/others-read "S_IROTH"))
 (define-c-const int (perm/others-write "S_IWOTH"))
 (define-c-const int (perm/others-execute "S_IXOTH"))))
|#

(define-c-const int (file-type-mask/ifdir "S_IFDIR")) ;; directory
(define-c-const int (file-type-mask/ififo "S_IFIFO")) ;; FIFO special
(define-c-const int (file-type-mask/ifreg "S_IFREG")) ;; regular
(define-c-const int (file-type-mask/ifsock "S_IFSOCK")) ;; socket
(define-c-const int (file-type-mask/ifblk "S_IFBLK")) ;; block special
(define-c-const int (file-type-mask/ifchr "S_IFCHR")) ;; character special
(define-c-const int (file-type-mask/iflnk "S_IFLNK")) ;; symbolic link


;;; 3.4  Processes

;;; 3.4.1  Process objects

;;; 3.4.2  Process waiting

;;; 3.4.3  Analysing process status codes

;;; 3.5  Process state

;;> Sets the current umask, returning the previous one.

(define-c mode_t (%umask umask) (mode_t))

;;> Returns the current working directory of the process as a string.

(define-c-const int (posix/path-max "PATH_MAX"))

(define-c non-null-string (%getcwd getcwd)
  ((result (array char 4096)) (value 4096 int)))

;;> Change the current working directory of the process.

(define-c errno (%chdir chdir) (string))

;;> Returns the current process id.

(define-c pid_t (pid getpid) ())

;;> Returns the parent process id.

(define-c pid_t (parent-pid getppid) ())

;;> Returns a process group id for a process, -1 on failure.

(define-c int (%getpgid getpgid) (pid_t))

;;> Sets a process group id, if first argument is 0, for the calling
;;> process, if the second argument is 0, "the process ID of the
;;> indicated process shall be used"

(define-c errno (%setpgid setpgid) (pid_t pid_t))

;;> Get and set process priority; details of use are complicted, refer
;;> to POSIX definition such as:
;;> http://pubs.opengroup.org/onlinepubs/9699919799/functions/getpriority.html

(define-c-const int (priority/process "PRIO_PROCESS"))
(define-c-const int (priority/process-group "PRIO_PGRP"))
(define-c-const int (priority/user "PRIO_USER"))

(define-c-int-type id_t)

(define-c int (%getpriority getpriority) (int id_t))

(define-c errno (%setpriority setpriority) (int id_t int))

(define-c errno (%getlogin_r getlogin_r)
  ((result (array char 128)) (value 128 int)))

(define-c uid_t (user-uid getuid) ())
(define-c gid_t (user-gid getgid) ())

(define-c-const int (groups/max "NGROUPS_MAX"))

;; ~~~~~~~~ Max derived from Ubuntu Bionic Beaver
(define-c int (%getgroups getgroups) ((value 65537 int) (result (array gid_t 65537))))

(define-c errno (%setuid setuid) (uid_t))
(define-c errno (%setgid setgid) (gid_t))

(define-c uid_t (user-effective-uid geteuid) ())
(define-c gid_t (user-effective-gid getegid) ())

(define-c errno (%seteuid seteuid) (uid_t))
(define-c errno (%setegid setegid) (gid_t))

(define-c errno (%setreuid setreuid) (uid_t uid_t))
(define-c errno (%setregid setregid) (gid_t gid_t))


;;; 3.6  User and group database access

;;> \section{\scheme{(user-information name-or-id)}}

;;> Returns the password entry for the given user.  \var{name-or-id}
;;> should be a string indicating the user name, or an integer
;;> for the user id.

(define-c-struct passwd
  predicate: passwd?
  (string  pw_name     passwd:name)
  (string  pw_passwd   passwd:passwd)
  (uid_t   pw_uid      passwd:uid)
  (gid_t   pw_gid      passwd:gid)
  (string  pw_gecos    passwd:gecos)
  (string  pw_dir      passwd:dir)
  (string  pw_shell    passwd:shell))

(define-c errno (%getpwuid_r getpwuid_r)
  (uid_t (result passwd)
         (link string)
         (value (string-size arg2) int)
         (result pointer passwd)))

(define-c errno (%getpwnam_r getpwnam_r)
  (string (result passwd)
          (link string)
          (value (string-size arg2) int)
          (result pointer passwd)))

(cond-expand
 ((not bsd)
  (define-c-struct group
    (string  gr_name     group:name)
    (string  gr_passwd   group:passwd)
    (gid_t   gr_gid      group:gid)
    ;;((array string)  gr_mem      group-members)
    )

  (define-c errno (%getgrgid_r getgrgid_r)
    (gid_t (result group)
           (link string)
           (value (string-size arg2) int)
           (result pointer group)))

  (define-c errno (%getgrnam_r getgrnam_r)
    (string (result group)
            (link string)
            (value (string-size arg2) int)
            (result pointer group)))
  ))

;;; 3.7  [Intentionally omitted]

;;; 3.8  System parameters

;;> Returns the standard hostname of the current processor.

(define-c-const int (system-name/host-name-max "HOST_NAME_MAX"))

(define-c errno (%gethostname gethostname)
  ((result (array char (auto-expand arg1))) (value 256 int)))

(define-c-struct utsname
  predicate: uname?
  (string sysname uname:os-name)
  (string nodename uname:node-name)
  (string release uname:release-name)
  (string version uname:version)
  (string machine uname:machine))

(define-c int (%uname uname) ((result utsname)))



;;; 3.9  Signal system

(define-c-const int (signal/abrt "SIGABRT"))
(define-c-const int (signal/abrt "SIGABRT"))
(define-c-const int (signal/alrm "SIGALRM"))
(define-c-const int (signal/bus "SIGBUS"))
(define-c-const int (signal/chld "SIGCHLD"))
(define-c-const int (signal/cont "SIGCONT"))
(define-c-const int (signal/fpe "SIGFPE"))
(define-c-const int (signal/hup "SIGHUP"))
(define-c-const int (signal/ill "SIGILL"))
(define-c-const int (signal/int "SIGINT"))
(define-c-const int (signal/kill "SIGKILL"))
(define-c-const int (signal/pipe "SIGPIPE"))
(define-c-const int (signal/quit "SIGQUIT"))
(define-c-const int (signal/segv "SIGSEGV"))
(define-c-const int (signal/stop "SIGSTOP"))
(define-c-const int (signal/term "SIGTERM"))
(define-c-const int (signal/tstp "SIGTSTP"))
(define-c-const int (signal/ttin "SIGTTIN"))
(define-c-const int (signal/ttou "SIGTTOU"))
(define-c-const int (signal/usr1 "SIGUSR1"))
(define-c-const int (signal/usr2 "SIGUSR2"))
(cond-expand
 ((not bsd)
  (define-c-const int (signal/poll "SIGPOLL"))))
(define-c-const int (signal/prof "SIGPROF"))
(define-c-const int (signal/sys "SIGSYS"))
(define-c-const int (signal/trap "SIGTRAP"))
(define-c-const int (signal/urg "SIGURG"))
(define-c-const int (signal/vtalrm "SIGVTALRM"))
(define-c-const int (signal/xcpu "SIGXCPU"))
(define-c-const int (signal/xfsz "SIGXFSZ"))

(define-c errno (%kill kill) (pid_t int))
(define-c errno (%killpg killpg) (pid_t int))

;;; 3.10  Time

;;> Accessors for the \scheme{timespec} struct.
;;/

;;> Returns the current time as a timespec, clock behavior including
;;> epoch defined by clck-id

(define-c-const int (clck-id/realtime "CLOCK_REALTIME"))
(define-c-const int (clck-id/monotonic "CLOCK_MONOTONIC"))

(define-c-int-type clockid_t)

(define-c errno clock-gettime (int (result timespec)))


;;; 3.11  Environment variables

;;; 3.12  Terminal device control
