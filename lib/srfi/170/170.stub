;; Parts of this from the following copyright notices, the total has
;; the same copyright terms, additions and changes Copyright 2019
;; Harold Ancell, Harold Ancell assigns the rights to his additions to
;; Alex Shinn.

;; filesystem.stub -- filesystem bindings
;; Copyright (c) 2009-2013 Alex Shinn.  All rights reserved.
;; BSD-style license: http://synthcode.com/license.txt

(cond-expand
 (plan9)
 (windows
  (c-system-include "sys/types.h")
  (c-system-include "fcntl.h")) ; may not be needed, or maybe needed for all
 (else

;;;  (c-system-include "sys/file.h") ; Only needed for BSD low level file operations?
  (c-system-include "unistd.h")
  (c-system-include "dirent.h")

  (c-system-include "sys/types.h")
  (c-system-include "sys/stat.h")

  (c-system-include "time.h")
  (c-system-include "sys/time.h")

  ))

;;; 3.1  Errors

  ;; ~~~~ Impliment!


;;; 3.2  I/O

;;> Duplicates the given file descriptor, returning he new value,
;; or -1 on failure.

(define-c fileno (duplicate-file-descriptor "dup") (fileno))

;;> Copies the first file descriptor to the second, closing
;;> it if needed.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(define-c errno (duplicate-file-descriptor-to "dup2") (fileno fileno))

;;> Closes the given file descriptor.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(define-c errno (close-file-descriptor "close") (fileno))


;;; 3.3  File system

;;> Creates a new directory with the given mode.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (create-directory "mkdir") (string (default #o777 int)))) ; ~~~~ #o775 would be a lot better
  (else
   (define-c errno (create-directory "mkdir_shim") (string (default #o777 int))))) ; ~~~~ #o775 would be a lot better

;;> Creates a fifo with the given mode.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (make-fifo "mkfifo") (string (default #o664 int))))) ; ~~~~ #o664 would be a lot better

;;> Creates a hard link to the first arg from the second.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (%create-hard-link "link") (string string))))

;;> Creates a symbolic link to the first arg from the second.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (%create-symbolic-link "symlink") (string string))))


;;> Deletes the directory named \var{string} from the filesystem.
;;> Does not attempt to delete recursively.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(define-c errno (delete-directory "rmdir") (string))

;;> Sets the file permissions as in chmod.

(define-c int chmod (string int))

;; ~~~~ (set-file-owner fname/port uid)     →     undefined         (procedure) 
;; ~~~~ (set-file-group fname/port gid)     →     undefined         (procedure) 

;; ~~~~ (set-file-timespecs fname [access-timespec mod-timespec])     →     undefined         (procedure) 

;;> Truncate the file to the given size.

(cond-expand
  ((not windows)
   (define-c int (file-truncate "ftruncate")
    (port-or-fileno off_t))))

;;> Code for walking directories

(define-c-type DIR
 finalizer: closedir)
(define-c-struct dirent
 (string d_name dirent-name))

(define-c (free DIR) opendir (string))
(define-c dirent readdir ((link (pointer DIR))))

;; See sexp_closedir_stub autogenerated from the above (how does it
;; get "close"??); obviously an open directory that's never closed
;; needs explicit finalization before being GCed.

(cond-expand
  (windows
   (c-include-verbatim "filesystem_win32_shim.c")
   (define-c-struct stat
    predicate: stat?
    (dev_t      st_dev      stat-dev)
    (ino_t      st_ino      stat-ino)
    (mode_t     st_mode     stat-mode)
    (nlink_t    st_nlink    stat-nlinks)
    (uid_t      st_uid      stat-uid)
    (gid_t      st_gid      stat-gid)
    (dev_t      st_rdev     stat-rdev)
    (off_t      st_size     stat-size)
    ;(blksize_t  st_blksize  stat-blksize)
    ;(blkcnt_t   st_blocks   stat-blocks)
    (time_t     st_atime    stat-atime)
    (time_t     st_mtime    stat-mtime)
    (time_t     st_ctime    stat-ctime)))
  (else
   (define-c-struct stat
    predicate: stat?
    (dev_t      st_dev      stat-dev)
    (ino_t      st_ino      stat-ino)
    (mode_t     st_mode     stat-mode)
    (nlink_t    st_nlink    stat-nlinks)
    (uid_t      st_uid      stat-uid)
    (gid_t      st_gid      stat-gid)
    (dev_t      st_rdev     stat-rdev)
    (off_t      st_size     stat-size)
    (blksize_t  st_blksize  stat-blksize)
    (blkcnt_t   st_blocks   stat-blocks)
    (time_t     st_atime    stat-atime)
    (time_t     st_mtime    stat-mtime)
    (time_t     st_ctime    stat-ctime))
   ))

(define-c errno stat (string (result stat)))
(define-c errno fstat (int (result stat)))
(cond-expand
  ((not windows)
   (define-c errno (file-link-status "lstat") (string (result stat)))))

#|
(cond-expand
  ((not windows)
   (define-c int readlink (string string int))))
|#

;;> Renames the first arg to the second.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(define-c errno (%rename-file "rename") (string string)) ; ~~~~ not in SRFI (yet)


;;; 3.4  Processes

;;; 3.4.1  Process objects

;;; 3.4.2  Process waiting

;;; 3.4.3  Analysing process status codes

;;; 3.5  Process state

(define-c unsigned-int (%umask umask) (unsigned-int))

;;> Returns the current working directory of the process as a string.

(define-c non-null-string (current-directory "getcwd")
  ((result (array char (auto-expand arg1))) (value 256 int)))

;;> Change the current working directory of the process.

(define-c errno (change-directory "chdir") (string))


;;; 3.6  User and group database access

;;; 3.7  [Intentionally omitted]

;;; 3.8  System parameters

;;; 3.9  Signal system

;;; 3.10  Time

(define-c-struct timespec
  predicate: timespec?
  constructor: (make-timespec)
  (time_t  tv_sec       timespec-seconds)
  (long    tv_nsec      timespec-nanoseconds))

;;> Accessors for the \scheme{timespec} struct.
;;/

;;> Returns the current time as a timespec, clock behavior including
;;> epoch defined by clck-id

(define-c-const int (clck-id/realtime "CLOCK_REALTIME"))
(define-c-const int (clck-id/monotonic "CLOCK_MONOTONIC"))

(define-c errno clock-gettime
  (int (result timespec)))


;;; 3.11  Environment variables

;;; 3.12  Terminal device control
